/* automatically generated by rust-bindgen */

#![allow(
    dead_code,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals
)]

/// <div rustbindgen derive="Copy" derive="Clone"></div>
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct inner {
    pub i: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_inner() {
    assert_eq!(
        ::std::mem::size_of::<inner>(),
        4usize,
        concat!("Size of: ", stringify!(inner))
    );
    assert_eq!(
        ::std::mem::align_of::<inner>(),
        4usize,
        concat!("Alignment of ", stringify!(inner))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inner>())).i as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(inner), "::", stringify!(i))
    );
}
#[repr(C)]
pub union nsStyleUnion {
    pub i: inner,
    pub primitiveInt: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_nsStyleUnion() {
    assert_eq!(
        ::std::mem::size_of::<nsStyleUnion>(),
        4usize,
        concat!("Size of: ", stringify!(nsStyleUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<nsStyleUnion>(),
        4usize,
        concat!("Alignment of ", stringify!(nsStyleUnion))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nsStyleUnion>())).i as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nsStyleUnion),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nsStyleUnion>())).primitiveInt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nsStyleUnion),
            "::",
            stringify!(primitiveInt)
        )
    );
}
impl Default for nsStyleUnion {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
